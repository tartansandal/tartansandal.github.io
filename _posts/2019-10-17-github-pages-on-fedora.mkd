---
layout: post
title:  "GitHub Pages with Fedora and Jekyll"
date:   2019-09-24 22:54:58 +1000
categories: jekyll fedora
comments: true
---

This is a sort of meta-post describing how I set up this blog, with some Fedora
Desktop specific advice.

I first stumbled on [GitHub Pages] and [Jekyll] while researching [Asciidoctor]
and was intrigued. It seemed to occupy a sweet spot in the world of technical
publishing:

* A very low bar of entry with free hosting via your existing GitHub account and
  automatic conversion of (the well known) GitHub Flavoured Markdown.

* Being built around Git, content could be developed, reviewed, and deployed
  just as you would 'code'. (No need to compose in clunky web editors or cut and
  paste from your favourite editor into web forms).

* A flexible, low-friction environment, with [Jekyll] and [Liquid] providing
  attractive and flexible layout and themes, plus plugins for extra features and
  few constraints for advanced users. You can even use your own domain name if
  you want to.

This looked like much more fun than the [Movable Type] based [blogs.perl.org]
I had previously used, and that kind of rekindled my desire to write a technical
blog again.

The starting point for this adventure was, well, a page that no longer
exists. To be honest, I first started looking at this four months ago and I kind
of got distracted by "life". By the time I had got back to it, things had
changed--fortunately for the better.

The [GitHub Pages] front page now gives you a nice video introduction and
interactive set up details, plus some links to various [Working with GitHub
Pages] guides. The quality of these guides has improved greatly. My only
criticism is, while the main contents page suggests a reasonable narrative,
the individual articles lack the navigation links to make that narrative easy to
follow--you have to keep going back to the contents page to make sure you
haven't missed anything.

[GitHub Pages]: https://pages.github.com
[Jekyll]: https://jekyllrb.com
[Asciidoctor]: https://asciidoctor.org
[Liquid]: https://shopify.github.io/liquid
[Movable Type]: https://www.movabletype.org
[blogs.perl.org]:http://blogs.perl.orgusers/kahlil_kal_hodgson
[Working with GitHub Pages]: https://help.github.com/en/categories/working-with-github-pages

## Some basic setup

First I needed to choose a "site type".

> There are three types of GitHub Pages sites: project, user, and organization.
> Project sites are connected to a specific project hosted on GitHub, such as
> a JavaScript library or a recipe collection. User and organization sites are
> connected to a specific GitHub account.

This distinction is repeated constantly throughout the documentation, so once
I figured out which one I was using I could skip over a lot of irrelevant
instructions.  For example, any references to a `gh-pages` branch only apply to
_Project_ site types.

I'm building a site to host a professional blog, ostensibly for gratuitous
self-promotion, so the _User_ type is definitely what I want.

Now that I know what site type I'm using, I can set up a "publishing source" by
simply creating a new git repository called "tartansandal.github.io", with the
understanding that the `master` branch of that repository will be the one that
will be automatically published to <https://tartansandal.github.io>.

That was pretty easy.

## Learning about Jekyll

GitHub pages uses Jekyll as its preferred static site generator and has
extensive set up and usage [documentation][GitHub Pages with Jekyll].  After
scanning that, I decided on running through the official [Jekyll Docs], in
order to get a better handle on its requirements and capabilities. This all
seemed quite reasonable.

One key point that was somewhat obscured by all the set up and configuration
instructions was that pushing any new content to the `master` branch of my
repository was going to make that content publicly available (almost)
immediately. If I wanted to review my updates before publishing, I would have to
install and run Jekyll locally. I'm definitely going to want to this for new
content, major edits, and layout changes.

[GitHub Pages with Jekyll]: https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll
[Jekyll Docs]: https://jekyllrb.com/docs

## Installing Jekyll locally

This is where I ran into some personal and Fedora specific wrinkles with _Ruby_,
_RubyGems_, and _Bundler_.

There are a number of installation guides including [Testing your GitHub Pages
Locally with Jekyll][Github Pages Locally] by GitHub and [Jekyll on Linux] by
Jekyll. Unfortunately these two (and many others) do not strictly agree, so we
have to make some careful decisions.

Firstly, I don't do any Ruby development, so this took a bit of digging into
that environment to sort out.

Now, Fedora has patched _RubyGems_ so that `gem` automatically performs a "user
install" if run by a normal user. (See your local `operating_system.rb` file for
details). In particular,

* Gems are deployed to `~/.gem`
* Executable files to `~/bin`

The Jekyll instructions suggest setting your environment so that

* Gems are deployed to `~/.gems`
* Executable files to `~/.gems/bin`

Following that advice is going to break any existing local gem installs. Not
good.

Managing local gem installations is a well known path to [dependency hell] and one
I'd rather avoid. [Bundler] has a nice solution to this: allow for multiple
versions of gems to be installed, but use a special command wrapper to ensure
the only the correct versions are used by your project.  In short:

* The project uses a `Gemfile` to specify the required top level gems and
  perhaps their minimal versions.

* The `bundle install` command installs those gems, along with any dependencies,
  to the default locations (see above).

* That command automatically creates a `Gemfile.lock` which contains the names
  and versions of those gems and their dependencies.

* The `bundle exec` command can then be used to run any programs under the
  version constraints specified by the `Gemfile.lock` file.

Now the GitHub instructions suggest installing Bundler using the `gem` command,
and using the `bundler` command to install Jekyll for your project.  I gather
this is to ensure the version of Jekyll matches the one used by your site, and
in particular GitHub Pages. The details of how exactly to do this are not
explained though.

On the other hand, the Jekyll guide suggests installing both Bundler and Jekyll
with the `gem` command, which is more straight-forward, but it is not clear what
version of `jekyll` is going to be used by your site and whether it is going to
be appropriately pinned to the version used by GitHub Pages.

There is also the option of installing distribution versions of either Bundler
or Jekyll. The Fedora versions are relatively modern and (after reading the
respective Changelogs) seem to be appropriately stable. We would not have to
worry about managing updates, but the versions are out of out control.

(A Docker image is another possibility, but we still have to come to terms with
version pinning before we could explore that).

A resolution to all this comes thinking about bootstrapping a new Github Pages
site.

[GitHub Pages Locally]: https://help.github.com/en/github/working-with-github-pages/testing-your-github-pages-site-locally-with-jekyll
[Jekyll on Linux]: https://jekyllrb.com/docs/installation/other-linux
[dependency hell]: https://en.wikipedia.org/wiki/Dependency_hell
[Bundler]: https://bundler.io

## Bootstrapping GitHub Pages with Jekyll

Talk about the gem-pages thing somehow.



If you already have Jekyll installed, then you can create a simple skeleton site
under `PATH` with:

```shell
jekyll new PATH
cd PATH
```

This generates scaffolding similar to the following:

```text
/
├── 404.html
├── about.md
├── _config.yml
├── Gemfile
├── index.md
└── _posts
    └── 2020-01-14-welcome-to-jekyll.markdown
```

This is a great start for a simple blog.

The `Gemfile` provides the basic requirements for a Jekyll, but most is Windows
specific.

3. Strip the Gemfile back to:

    ```Gemfile
    source "https://rubygems.org"

    gem "github-pages", group: :jekyll_plugins

    # If you have any plugins, put them here!
    group :jekyll_plugins do
      gem "jekyll-feed", "~> 0.6"
    end
    ```


Installation options:

This last option seems to be the simplest and most elegant.

### Fedora process

1. Install distribution packages

  sudo dnf install rubygem-bundler rubygem-jekyll

2. Initialize new site with

  jekyll new path-to-new-site
  cd path-to-new-site


3. Strip the Gemfile back to:

    ```
    source "https://rubygems.org"
    gem "github-pages", group: :jekyll_plugins
    ```

4. Run bundler to install and pin our working set of gems:

    ```
    bundle install
    ```

5. Serve the content with

    ```
    bundle exec jekyll server
    ```

## Choosing a Theme

I'm pretty happy with the minimal theme for the moment.  Though I have to wonder
how this is going to pan out if I start blogging more STEM stuff.

See <https://github.com/jekyll/minima> for advice on configuring and customizing.

## Plus AsciiDoc extensions

Need some kind of style/structure that I like. Steal from someone?

## Site layout

drafts?

## Guides

[bens guide]: https://ben.balter.com/jekyll-style-guide/
[sylvains guide]: https://www.sylvaindurand.org/using-github-to-serve-jekyll/

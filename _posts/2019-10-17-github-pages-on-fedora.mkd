---
layout: post
title:  "GitHub Pages with Fedora and Jekyll"
date:   2019-09-24 22:54:58 +1000
categories: jekyll fedora
comments: true
---

This is a sort of meta-blog about how I set up this blog site, being a record of
various decisions I made along the way and includes some Fedora Desktop specific
advice.

I first stumbled on GitHub and Jekyll while researching [Asciidoctor] and was
intrigued. It seemed to occupy a sweet spot in the world of website publishing.

* very low bar of entry
  * free hosting
  * integrated with a tool (GitHub) that I used extensively

* low friction
  * automatic publishing
  * attractive output themes
  * plugins for extra integrations
  * [x] flexibility (few constraints) for advanced users

...FIXME

The starting point for this adventure was, well, a page that no longer exists.
It seems
some well needed documentation clean up was in order.  An equivalent starting point
might be [Working with GitHub Pages] which provides a list of related articles
ordered into a somewhat reasonable narrative.

There are a lot of cross-links to other articles, both internal and external,
and a lot of repeated content, so it can be a bit confusing and even daunting if
you try to follow too many cross-links.  Following the pages in the order
listed, rather than following cross-links, gave me a narrative I could follow
without too much trouble. Scanning through the articles to get a handle on some
key concepts before digging deeper was definitely worthwhile.

[Working with GitHub Pages]: https://help.github.com/en/categories/working-with-github-pages
[Asciidoctor]: https://asciidoctor.org

## Choosing a "site type"

The two options are "User/Organization" and "Project".

This distinction is repeated constantly, so once I figured out which one I was using
I could skip over a lot of irrelevant instructions.

The _User/Organization_ type are for _top level_ sites relating to that
particular user or organization. There can only be one of these for each user or
organisation.

The _Project_ type is for any _project level_ sites that a user or organization may
have. There can only be one of there for each _project_, though a user or organization
may have a number of projects.

I'm building a site to host a professional blog, ostensibly for gratuitous
self-promotion, so the "User/Organization" type is definitely what I want.

## Configuring a "publishing source" for my GitHub pages

Now that I know what site type I'm using, I simply need to create a new git repo
called "tartansandal.github.io" with the understanding that the `master` branch
of that repo will be the one that is published.

That was pretty easy.

## Learning about Jekyll

GitHub pages is pushing Jekyll as the preferred static site generator.
<https://help.github.com/en/articles/using-jekyll-as-a-static-site-generator-with-github-pages>

So I started out running through the official tutorial.
<https://jekyllrb.com/docs/step-by-step/01-setup/>

This all seemed quite cool and reasonable.

A key part of that was running jekyll locally on my laptop, so I could see the results
of the site generation without having to push my master branch.

I was able to make everything work, but ran into some issues with installation.

## Installing Jekyll locally

After experimenting with a variety of guides including

<https://help.github.com/en/articles/setting-up-your-github-pages-site-locally-with-jekyll>

I came up with the following requirements for my Fedora setup:

* Easily install Jekyll and its dependencies in a "safe" way.
* Maintain compatibility with GitHub Pages.
* Manage updates while pinning versions.
* Bootstrap a new site with the default scaffolding.

Installation options:

1. Use the `gem` command to install bundler as root, then use `bundler` to
   install dependencies as root. That seems very unsafe to me.  Very surprised
   that this option is suggested.

2. Configure the `gem` command to install bundler and dependencies as a normal
   'user'.  This lead to a whole rabbit-hole of decisions about how to manage
   a growing set of 'user' gems.  I'm not a regular Ruby user so this seemed
   overkill and I'd probably make some mistakes. Using RVM to manage this would
   be more robust.

3. Install the distribution version of `bundler`, then use the `bundler` command
   with the `--path` argument to install to a _project-local_ directory. This
   had the nice advantage of locking and supplying gems for a particular project
   in one place. A creating the scaffolding for a new site still required
   installing `jekyll` via bundler, then running `bundle exec new`, then
   updating the resulting site to install jekyll again.  Or manually shuffling
   files around would work but did not seem very elegant.  Chicken and egg

4. Cloning the Github `pages-gem` repository and building a Docker image from
   which to to run jekyll commands.  This gave nice OS isolation, however,
   I would be responsible for updating the Docker image and I was still left
   with the bootstrapping issue.

5. Install the distribution version of `bundler` and `jekyll`, then bootstrap
   from there.  The Fedora versions are relatively modern and (after reading the
   respective Changelogs) seem to be appropriately stable.

This last option seems to be the simplest and most elegant.

1. Install distribution packages

  sudo dnf install rubygem-bundler rubygem-jekyll

2. Initialize new site with

  jekyll new path-to-new-site
  cd path-to-new-site

This gives the following scaffolding:

```text
/
├── 404.html
├── about.md
├── _config.yml
├── Gemfile
├── index.md
└── _posts
    └── 2019-09-27-welcome-to-jekyll.markdown
```

3. Strip the Gemfile back to:

    ```
    source "https://rubygems.org"
    gem "github-pages", group: :jekyll_plugins
    ```

4. Run bundler to install and pin our working set of gems:

    ```
    bundle install --path vendor/bundle
    ```

5. Serve the content with

    ```
    bundle exec jekyll server
    ```

6. Or create a Makefile with the following content

  ~~~~Makefile
  server:
      bundle exec jekyll server
  ~~~~

  then simply run `make`. (The first target is the default)

## Choosing a Theme

I'm pretty happy with the minimal theme for the moment.  Though I have to wonder
how this is going to pan out if I start blogging more STEM stuff.

See <https://github.com/jekyll/minima> for advice on configuring and customizing.

## Plus AsciiDoc extensions

Need some kind of style/structure that I like. Steal from someone?

## Site layout

drafts?

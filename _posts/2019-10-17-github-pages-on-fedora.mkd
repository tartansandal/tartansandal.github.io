---
layout: post
title:  "GitHub Pages with Fedora and Jekyll"
date:   2019-09-24 22:54:58 +1000
categories: jekyll fedora
comments: true
---

This is a sort of meta-post describing how I set up this blog, with some Fedora
Desktop specific advice.

I first stumbled on [GitHub Pages] and [Jekyll] while researching [Asciidoctor]
and was intrigued. It seemed to occupy a sweet spot in the world of technical
publishing:

* A very low bar of entry with free hosting via your existing GitHub account and
  automatic conversion of (the well known) GitHub Flavoured Markdown.

* Being built around Git, content could be developed, reviewed, and deployed
  just as you would 'code'. (No need to compose in clunky web editors or cut and
  paste from your favourite editor into web forms).

* A flexible, low-friction environment, with [Jekyll] and [Liquid] providing
  attractive and flexible layout and themes, plus plugins for extra features and
  few constraints for advanced users. You can even use your own domain name if
  you want to.

This looked like much more fun than the [Movable Type] based [blogs.perl.org]
I had previously used, and that kind of rekindled my desire to write a technical
blog again.

The starting point for this adventure was, well, a page that no longer
exists. To be honest, I first started looking at this four months ago and I kind
of got distracted by "life". By the time I had got back to it, things had
changed--fortunately for the better.

The [GitHub Pages] front page now gives you a nice video introduction and
interactive set up details, plus some links to various [Working with GitHub
Pages] guides. The quality of these guides has improved greatly. My only
criticism is, while the main contents page suggests a reasonable narrative,
the individual articles lack the navigation links to make that narrative easy to
follow--you have to keep going back to the contents page to make sure you
haven't missed anything.

[GitHub Pages]: https://pages.github.com
[Jekyll]: https://jekyllrb.com
[Asciidoctor]: https://asciidoctor.org
[Liquid]: https://shopify.github.io/liquid
[Movable Type]: https://www.movabletype.org
[blogs.perl.org]:http://blogs.perl.orgusers/kahlil_kal_hodgson
[Working with GitHub Pages]: https://help.github.com/en/categories/working-with-github-pages

## Some basic setup

First I needed to choose a "site type".

> There are three types of GitHub Pages sites: project, user, and organization.
> Project sites are connected to a specific project hosted on GitHub, such as
> a JavaScript library or a recipe collection. User and organization sites are
> connected to a specific GitHub account.

This distinction is repeated constantly throughout the documentation, so once
I figured out which one I was using I could skip over a lot of irrelevant
instructions.  For example, any references to a `gh-pages` branch only apply to
_Project_ site types.

I'm building a site to host a professional blog, ostensibly for gratuitous
self-promotion, so the _User_ type is definitely what I want.

Now that I know what site type I'm using, I can set up a "publishing source" by
simply creating a new git repository called "tartansandal.github.io", with the
understanding that the `master` branch of that repository will be the one that
will be automatically published to <https://tartansandal.github.io>.

That was pretty easy.

## Learning about Jekyll

GitHub pages uses Jekyll as its preferred static site generator and has
extensive set up and usage [documentation][GitHub Pages with Jekyll].  After
scanning that, I decided on running through the official [Jekyll Docs], in
order to get a better handle on its requirements and capabilities. This all
seemed quite reasonable.

One key point that was somewhat obscured by all the set up and configuration
instructions was that pushing any new content to the `master` branch of my
repository was going to make that content publicly available (almost)
immediately. If I wanted to review my updates before publishing, I would have to
install and run Jekyll locally. I'm definitely going to want to this for new
content, major edits, and layout changes.

[GitHub Pages with Jekyll]: https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll
[Jekyll Docs]: https://jekyllrb.com/docs

## Installing Jekyll locally

There are a number of installation guides including [Testing your GitHub Pages
Locally with Jekyll][Github Pages Locally] by "GitHub" and [Jekyll on Linux] by
"Jekyll". Unfortunately these two (and many others) do not strictly agree, so we
have to make some careful decisions.

This is where I ran into some personal and Fedora specific wrinkles with [Ruby],
[RubyGems], and [Bundler].  I don't do any Ruby development myself, so this took
a bit of digging and experimentation to sort out.

[GitHub Pages Locally]: https://help.github.com/en/github/working-with-github-pages/testing-your-github-pages-site-locally-with-jekyll
[Jekyll on Linux]: https://jekyllrb.com/docs/installation/other-linux
[Ruby]: https://www.ruby-lang.org/en/
[RubyGems]: https://rubygems.org/
[Bundler]: https://bundler.io

### RubyGems

The instructions from "Jekyll" suggest you first adjust your environment so that
running the `gem` command as a normal user operates on user files rather than
the default system files. In particular,

* Gems are installed under `~/.gems`
* Executable files are installed under `~/.gems/bin`.

This is probably appropriate for Ubuntu and many other Linux systems.

However, Fedora has patched RubyGems (see [`operating_system.rb`]) so that the
`gem` command automatically performs a "user install" if run by a normal user.
In particular,

* Gems are installed under `~/.gem/ruby`
* Executable files are installed under `~/bin`

This make the `gem` command "just work" without the user having to change their
environment, but uses incompatible paths to the "Jekyll" suggestion.

If you are running Fedora and have already installed some local ruby gems, then
blindly following the "Jekyll" suggestion is going to break them.

[`operating_system.rb`]: file:///usr/share/rubygems/rubygems/defaults/operating_system.rb

### Bundler

The instructions from both "GitHub" and "Jekyll" suggest using [Bundler] to
manage your sites dependencies.  Managing local gem installations is a well
known "path" to [dependency hell] and one we'd rather avoid. [Bundler] is a nice
solution that allows you to safely install multiple, potentially conflicting,
versions of gems, by using a special command wrapper to ensure that only the
correct versions are used by your project.  In short:

* A `Gemfile` is used to specify the required gems and perhaps their minimal
  versions.

* The `bundle install` command installs those gems, plus any dependencies, whilst
  automatically recording the required versions in `Gemfile.lock`.

* The `bundle exec` command is used to run any programs under the version
  constraints specified in `Gemfile.lock`.

Unfortunately this does not work well with the Fedora patch to RubyGems
mentioned above. However, we can get mutually compatible behaviour by adding the
following our bash configuration:

```bash
export GEM_HOME=$HOME/.gem/ruby
ln -sf $HOME/bin $HOME/.gem/ruby/
```

Bundler also has the option of installing gems inside your project directory,
just like Python's `vitualenv` or Node's `node_modules`:

```shell
bundle config set path .bundle
bundle install
```

One advantage of this is that you don't end up polluting your path with
executables from bundled dependencies, and it can be easier to clean out old
gems. This does cost some disk space (gems are no shared between projects) but
its not that much unless you use use it a lot. For this site only 84MB were
required.

### Installation choices

The "Jekyll" instructions suggests installing some system dependencies with

```shell
sudo dnf install ruby ruby-devel @development-tools
```

Then installing both Bundler and Jekyll with

```shell
gem install bundler jekyll
```

Using the configuration tweaks mentioned above, this is all very
straight-forward.

On the other hand the GitHub instructions suggest using the `bundler` command to
install Jekyll for your project in order to ensure the version of Jekyll is
compatible with the one used by GitHub. The details of how exactly to do this
are not explained though.

There is also the option of installing distribution versions of Bundler and
Jekyll with

```shell
sudo dnf install rubygems-bundler rubygems-jekyll
```
which will automatically take care of any dependency requirements.
These Fedora versions are relatively modern and (after reading the respective
Changelogs) seem to be appropriately stable. We would not have to worry about
managing updates, but the exact versions are out of out control.


[dependency hell]: https://en.wikipedia.org/wiki/Dependency_hell

## Bootstrapping GitHub Pages with Jekyll

Talk about the gem-pages thing somehow.



If you already have Jekyll installed, then you can create a simple skeleton site
under `PATH` with:

```shell
jekyll new PATH
cd PATH
```

This generates scaffolding similar to the following:

```text
/
├── 404.html
├── about.md
├── _config.yml
├── Gemfile
├── index.md
└── _posts
    └── 2020-01-14-welcome-to-jekyll.markdown
```

This is a great start for a simple blog.

The `Gemfile` provides the basic requirements for a Jekyll, but most is Windows
specific.

3. Strip the Gemfile back to:

    ```Gemfile
    source "https://rubygems.org"

    gem "github-pages", group: :jekyll_plugins

    # If you have any plugins, put them here!
    group :jekyll_plugins do
      gem "jekyll-feed", "~> 0.6"
    end
    ```


Installation options:

This last option seems to be the simplest and most elegant.

### Fedora process

1. Install distribution packages

  sudo dnf install rubygem-bundler rubygem-jekyll

2. Initialize new site with

  jekyll new path-to-new-site
  cd path-to-new-site


3. Strip the Gemfile back to:

    ```
    source "https://rubygems.org"
    gem "github-pages", group: :jekyll_plugins
    ```

4. Run bundler to install and pin our working set of gems:

    ```
    bundle install
    ```

5. Serve the content with

    ```
    bundle exec jekyll server
    ```

## Choosing a Theme

I'm pretty happy with the minimal theme for the moment.  Though I have to wonder
how this is going to pan out if I start blogging more STEM stuff.

See <https://github.com/jekyll/minima> for advice on configuring and customizing.

## Plus AsciiDoc extensions

Need some kind of style/structure that I like. Steal from someone?

## Site layout

drafts?

## Guides

[bens guide]: https://ben.balter.com/jekyll-style-guide/
[sylvains guide]: https://www.sylvaindurand.org/using-github-to-serve-jekyll/
